name: 🏷️ Release

on:
  push:
    tags:
      - 'v*' # Se activa con tags como v1.0.0, v1.2.3, etc.

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10'

jobs:
  # Job de validación de release
  validate-release:
    name: ✅ Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: 📋 Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: 🧪 Run all tests
      run: pnpm test
      
    - name: 🏗️ Build project
      run: pnpm build
      
    - name: 📋 Upload release build
      uses: actions/upload-artifact@v4
      with:
        name: release-build-${{ github.ref_name }}
        path: dist/
        retention-days: 90
        
  # Job de creación de release
  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: validate-release
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        
    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: 📋 Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: 🏗️ Build project
      run: pnpm build
      
    - name: 📋 Download release build
      uses: actions/download-artifact@v4
      with:
        name: release-build-${{ github.ref_name }}
        path: dist/
      
    - name: 📝 Generate changelog
      id: changelog
      uses: actions/github-script@v7
      with:
        script: |
          const { data: commits } = await github.rest.repos.compareCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base: 'main',
            head: context.sha,
          });
          
          let changelog = `## 🚀 Release ${context.ref_name}\n\n`;
          changelog += `**Released:** ${new Date().toISOString().split('T')[0]}\n\n`;
          
          if (commits.commits.length > 0) {
            changelog += `### 📝 Changes:\n\n`;
            
            const categories = {
              'feat': '✨ Features',
              'fix': '🐛 Bug Fixes',
              'docs': '📚 Documentation',
              'style': '🎨 Style',
              'refactor': '♻️ Refactoring',
              'test': '🧪 Tests',
              'chore': '🔧 Chores',
              'perf': '⚡ Performance',
              'ci': '👷 CI/CD',
              'build': '📦 Build',
              'revert': '⏪ Revert',
            };
            
            const categorizedCommits = {};
            
            for (const commit of commits.commits) {
              const message = commit.commit.message;
              const type = message.match(/^(\w+)(\(.+\))?:/)?.[1];
              
              if (type && categories[type]) {
                if (!categorizedCommits[type]) {
                  categorizedCommits[type] = [];
                }
                categorizedCommits[type].push(message.split('\n')[0]);
              } else {
                if (!categorizedCommits['other']) {
                  categorizedCommits['other'] = [];
                }
                categorizedCommits['other'].push(message.split('\n')[0]);
              }
            }
            
            for (const [type, messages] of Object.entries(categorizedCommits)) {
              if (type === 'other') {
                changelog += `### 📝 Other Changes:\n`;
              } else {
                changelog += `### ${categories[type]}:\n`;
              }
              
              for (const message of messages) {
                const cleanMessage = message.replace(/^\w+(\(.+\))?:\s*/, '');
                changelog += `- ${cleanMessage}\n`;
              }
              changelog += '\n';
            }
          }
          
          changelog += `### 📦 Installation:\n\n`;
          changelog += `\`\`\`bash\n`;
          changelog += `# Clone the repository\n`;
          changelog += `git clone https://github.com/${context.repo.owner}/${context.repo.repo}.git\n`;
          changelog += `cd ${context.repo.repo}\n`;
          changelog += `git checkout ${context.ref_name}\n`;
          changelog += `pnpm install\n`;
          changelog += `pnpm dev\n`;
          changelog += `\`\`\`\n\n`;
          
          changelog += `### 🔗 Links:\n\n`;
          changelog += `- 🌐 [Live Demo](https://${context.repo.owner}.github.io/${context.repo.repo}/)\n`;
          changelog += `- 📚 [Documentation](https://${context.repo.owner}.github.io/${context.repo.repo}/docs/)\n`;
          changelog += `- 🐛 [Report Issues](https://github.com/${context.repo.owner}/${context.repo.repo}/issues)\n`;
          
          core.setOutput('changelog', changelog);
          
    - name: 🏷️ Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        
    - name: 📦 Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: vonsim8-${{ github.ref_name }}.zip
        asset_content_type: application/zip
        
    - name: 📋 Create release summary
      run: |
        echo "## 🏷️ Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "**Released at:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Live Demo:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
        
  # Job de notificación
  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    
    steps:
    - name: 📊 Release notification
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', ''),
          });
          
          console.log(`🚀 Release created successfully!`);
          console.log(`📦 Version: ${release.tag_name}`);
          console.log(`🔗 URL: ${release.html_url}`);
          console.log(`📝 Description: ${release.body ? release.body.substring(0, 100) + '...' : 'No description'}`);
          
          // Opcional: Enviar notificación a Discord/Slack/etc.
          // Aquí puedes agregar integraciones con otros servicios 