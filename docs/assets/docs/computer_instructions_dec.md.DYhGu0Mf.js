import{_ as t,c as o,o as a,ag as i}from"./chunks/framework.BRWBV1zN.js";const m=JSON.parse('{"title":"DEC","description":"","frontmatter":{},"headers":[],"relativePath":"computer/instructions/dec.md","filePath":"computer/instructions/dec.md","lastUpdated":1755200702000}'),d={name:"computer/instructions/dec.md"};function n(c,e,s,r,l,p){return a(),o("div",null,e[0]||(e[0]=[i('<h1 id="dec" tabindex="-1">DEC <a class="header-anchor" href="#dec" aria-label="Permalink to &quot;DEC&quot;">​</a></h1><p>Esta instrucción resta uno al operando destino y almacena el resultado en el mismo operando.</p><p>Los <a href="./../cpu.html#flags"><em>flags</em></a> se modifican de la siguiente manera:</p><ul><li>Si la resta no entra en el operando destino, entonces <code>CF=1</code>. De lo contrario, <code>CF=0</code>.</li><li>Si el resultado es cero, entonces <code>ZF=1</code>. De lo contrario, <code>ZF=0</code>.</li><li>Si el el bit más significativo del resultado es <code>1</code>, entonces <code>SF=1</code>. De lo contrario, <code>SF=0</code>.</li><li>Si el operando es negativo y el resultado positivo, entonces <code>OF=1</code>. De lo contrario, <code>OF=0</code>.</li></ul><h2 id="uso" tabindex="-1">Uso <a class="header-anchor" href="#uso" aria-label="Permalink to &quot;Uso&quot;">​</a></h2><div class="language-vonsim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vonsim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DEC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dest</span></span></code></pre></div><p><em>dest</em> puede ser un registro o una dirección de memoria (ver <a href="./../assembly.html#operandos">tipos de operandos</a>).</p><h2 id="codificacion" tabindex="-1">Codificación <a class="header-anchor" href="#codificacion" aria-label="Permalink to &quot;Codificación&quot;">​</a></h2><ul><li>Registro<br><code>1111_Rx11</code></li><li>Memoria (directo)<br><code>1111_0011</code>, <em>dir</em></li><li>Memoria (indirecto <code>BL</code>) <code>1111_0111</code></li></ul><p><code>Rx</code>: Índices de registros, número entre <code>0</code> y <code>3</code>, cada índice es de 2 bits.</p><table tabindex="0"><thead><tr><th style="text-align:center;">Registro</th><th style="text-align:center;">Binario</th><th style="text-align:center;">Decimal</th></tr></thead><tbody><tr><td style="text-align:center;">AL</td><td style="text-align:center;">00</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">BL</td><td style="text-align:center;">01</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">CL</td><td style="text-align:center;">10</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">DL</td><td style="text-align:center;">11</td><td style="text-align:center;">3</td></tr></tbody></table>',11)]))}const u=t(d,[["render",n]]);export{m as __pageData,u as default};
