import{_ as a,c as r,o as i,ag as s}from"./chunks/framework.kBYjoCd5.js";const u=JSON.parse('{"title":"Impresora","description":"","frontmatter":{},"headers":[],"relativePath":"io/devices/printer.md","filePath":"io/devices/printer.md","lastUpdated":1753048422000}'),o={name:"io/devices/printer.md"};function n(l,e,c,m,t,p){return i(),r("div",null,e[0]||(e[0]=[s(`<h1 id="impresora" tabindex="-1">Impresora <a class="header-anchor" href="#impresora" aria-label="Permalink to &quot;Impresora&quot;">​</a></h1><p>El simulador cuenta con una impresora con un puerto paralelo tipo <em>Centronics</em>. Esta cuenta con papel y un <em>buffer</em>.</p><p>Esta impresora recibe un carácter por vez, y lo imprime en el papel. Como la impresora es lenta, el carácter no se imprime inmediatamente, sino que se almacena en un <em>buffer</em> interno. Cuando la impresora termina de imprimir un carácter, imprime el siguiente, y así sucesivamente hasta que el <em>buffer</em> se vacíe.</p><p>El tiempo que tarda la impresora en imprimir un carácter es configurable.</p><p>Si el <em>buffer</em> se encuentra lleno y aún así se envía un carácter, este se pierde. Para evitar eso, la impresora provee el flag <em>busy</em>: cuando es <code>1</code>, el <em>buffer</em> está lleno.</p><p>Cada vez que se envía un carácter, si el <em>buffer</em> no está lleno, el flag <em>busy</em> se pone en <code>1</code>. Luego, si el <em>buffer</em> se llenó, este quedará en <code>1</code> hasta que se imprima algún carácter. De lo contrario, ni bien se agrege el carácter al <em>buffer</em>, el flag <em>busy</em> volverá a <code>0</code>.</p><h2 id="imprimir-con-pio" tabindex="-1">Imprimir con PIO <a class="header-anchor" href="#imprimir-con-pio" aria-label="Permalink to &quot;Imprimir con PIO&quot;">​</a></h2><p>Una opción es conectar la impresora al <a href="./../modules/pio.html">PIO</a>. La conexión queda así:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PA = ____ __SB</span></span>
<span class="line"><span>PB = DDDD DDDD</span></span></code></pre></div><p>En <code>PB</code> se almacenará carácter a imprimir, expresado en ASCII. En <code>PA</code>, los seis bits más significativos no hacen nada. El bit menos significativo es la flag <em>busy</em>. Y el que queda es el <em>strobe</em>.</p><p>El <em>strobe</em> es el bit que le indica a la impresora que queremos imprimir. Las impresoras Centronics toman el valor en <code>PB</code> cuando detectan un flanco ascendente en el <em>strobe</em>. Es decir, una transición de <code>S=0</code> a <code>S=1</code>.</p><p>En resumen, para imprimir un carácter, hay que</p><ol><li>verificar que el <em>buffer</em> no esté lleno (flag <em>busy</em>),</li><li>escribir el carácter en <code>PB</code>,</li><li>poner el <em>strobe</em> en 0,</li><li>poner el <em>strobe</em> en 1.</li></ol><h2 id="imprimir-con-handshake" tabindex="-1">Imprimir con Handshake <a class="header-anchor" href="#imprimir-con-handshake" aria-label="Permalink to &quot;Imprimir con Handshake&quot;">​</a></h2><p>A diferencia del PIO, el <a href="./../modules/handshake.html">Handshake</a> es un módulo diseñado específicamente para las impresoras Centronics.</p><p>Con el Handshake no hay que preocuparse por el <em>strobe</em>, ya que este automatiza el flanco ascendente. Así, para imprimir basta con</p><ol><li>verificar que el <em>buffer</em> no esté lleno (flag <em>busy</em>),</li><li>escribir el carácter en el registro de datos.</li></ol><p>Más información sobre el Handshake y sus funcionalidades <a href="./../modules/handshake.html">aquí</a>.</p><h2 id="caracteres-especiales" tabindex="-1">Caracteres especiales <a class="header-anchor" href="#caracteres-especiales" aria-label="Permalink to &quot;Caracteres especiales&quot;">​</a></h2><p>Además de los caracteres ASCII comunes, hay otros dos que pueden resultar útiles:</p><ul><li>el carácter de salto de línea (<code>LF</code>, 10 en decimal) imprime, en efecto, un salto de línea — útil para no imprimir todo en una sola línea;</li><li>el carácter de <em>form feed</em> (<code>FF</code>, 12 en decimal) limpia la impresora (dicho de otra forma, arranca la hoja).</li></ul>`,21)]))}const f=a(o,[["render",n]]);export{u as __pageData,f as default};
