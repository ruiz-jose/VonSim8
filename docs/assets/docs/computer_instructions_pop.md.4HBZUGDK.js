import{_ as t,c as a,o,ag as d}from"./chunks/framework.BRWBV1zN.js";const g=JSON.parse('{"title":"POP","description":"","frontmatter":{},"headers":[],"relativePath":"computer/instructions/pop.md","filePath":"computer/instructions/pop.md","lastUpdated":1753623712000}'),r={name:"computer/instructions/pop.md"};function n(c,e,s,i,l,p){return o(),a("div",null,e[0]||(e[0]=[d('<h1 id="pop" tabindex="-1">POP <a class="header-anchor" href="#pop" aria-label="Permalink to &quot;POP&quot;">​</a></h1><p>Esta instrucción desapila el elemento en el tope en la <a href="./../cpu.html#pila">pila</a> y lo almacena en el operando destino. Los <a href="./../cpu.html#flags"><em>flags</em></a> no se modifican.</p><p>Esta instrucción primero lee el valor apuntado por <code>SP</code> y lo guarda en el operando destino, para luego incrementar el registro <code>SP</code> en 2.</p><h2 id="uso" tabindex="-1">Uso <a class="header-anchor" href="#uso" aria-label="Permalink to &quot;Uso&quot;">​</a></h2><div class="language-vonsim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vonsim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">POP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dest</span></span></code></pre></div><p><em>dest</em> solo puede ser un registro de 16 bits (ver <a href="./../assembly.html#operandos">tipos de operandos</a>).</p><h2 id="codificacion" tabindex="-1">Codificación <a class="header-anchor" href="#codificacion" aria-label="Permalink to &quot;Codificación&quot;">​</a></h2><p><code>01101rrr</code></p><p>Donde <code>rrr</code> codifica el registro fuente según esta tabla:</p><table tabindex="0"><thead><tr><th style="text-align:center;"><code>rrr</code></th><th style="text-align:center;"><em>dest</em></th></tr></thead><tbody><tr><td style="text-align:center;"><code>000</code></td><td style="text-align:center;"><code>AX</code></td></tr><tr><td style="text-align:center;"><code>001</code></td><td style="text-align:center;"><code>CX</code></td></tr><tr><td style="text-align:center;"><code>010</code></td><td style="text-align:center;"><code>DX</code></td></tr><tr><td style="text-align:center;"><code>011</code></td><td style="text-align:center;"><code>BX</code></td></tr><tr><td style="text-align:center;"><code>100</code></td><td style="text-align:center;"><code>SP</code></td></tr><tr><td style="text-align:center;"><code>101</code></td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;"><code>110</code></td><td style="text-align:center;">--</td></tr><tr><td style="text-align:center;"><code>111</code></td><td style="text-align:center;">--</td></tr></tbody></table>',10)]))}const m=t(r,[["render",n]]);export{g as __pageData,m as default};
