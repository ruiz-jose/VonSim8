import{_ as a,c as o,o as s,ag as n}from"./chunks/framework.BRWBV1zN.js";const h=JSON.parse('{"title":"Actualización de la Fase \\"Obtener Operandos\\"","description":"","frontmatter":{},"headers":[],"relativePath":"fetch-operands-phase-update.md","filePath":"fetch-operands-phase-update.md","lastUpdated":1754088323000}'),i={name:"fetch-operands-phase-update.md"};function c(t,e,r,l,d,p){return s(),o("div",null,e[0]||(e[0]=[n(`<h1 id="actualizacion-de-la-fase-obtener-operandos" tabindex="-1">Actualización de la Fase &quot;Obtener Operandos&quot; <a class="header-anchor" href="#actualizacion-de-la-fase-obtener-operandos" aria-label="Permalink to &quot;Actualización de la Fase &quot;Obtener Operandos&quot;&quot;">​</a></h1><h2 id="resumen-de-cambios" tabindex="-1">Resumen de Cambios <a class="header-anchor" href="#resumen-de-cambios" aria-label="Permalink to &quot;Resumen de Cambios&quot;">​</a></h2><p>Se ha implementado una mejora en el comportamiento de la fase &quot;Obtener operandos&quot; dentro del ciclo de ejecución de una instrucción. Ahora esta fase finaliza específicamente cuando el operando se escribe en el registro MBR (Memory Buffer Register).</p><h2 id="cambios-implementados" tabindex="-1">Cambios Implementados <a class="header-anchor" href="#cambios-implementados" aria-label="Permalink to &quot;Cambios Implementados&quot;">​</a></h2><h3 id="_1-nuevo-tipo-de-fase" tabindex="-1">1. Nuevo Tipo de Fase <a class="header-anchor" href="#_1-nuevo-tipo-de-fase" aria-label="Permalink to &quot;1. Nuevo Tipo de Fase&quot;">​</a></h3><ul><li>Se agregó la fase <code>&quot;fetching-operands-completed&quot;</code> al tipo <code>Cycle</code> en <code>app/src/computer/cpu/state.ts</code></li><li>Esta fase indica que la obtención de operandos ha terminado</li></ul><h3 id="_2-logica-de-finalizacion-de-fase" tabindex="-1">2. Lógica de Finalización de Fase <a class="header-anchor" href="#_2-logica-de-finalizacion-de-fase" aria-label="Permalink to &quot;2. Lógica de Finalización de Fase&quot;">​</a></h3><ul><li>Se modificó el evento <code>cpu:mbr.get</code> en <code>app/src/computer/cpu/events.ts</code></li><li>Ahora cuando se escribe en el MBR durante la fase &quot;fetching-operands&quot;, se marca automáticamente el fin de esta fase</li><li>Se excluye la transferencia a IR (que es parte de la captación de instrucción)</li></ul><h3 id="_3-actualizaciones-de-ui" tabindex="-1">3. Actualizaciones de UI <a class="header-anchor" href="#_3-actualizaciones-de-ui" aria-label="Permalink to &quot;3. Actualizaciones de UI&quot;">​</a></h3><ul><li><strong>Header</strong>: Se agregó soporte para mostrar la nueva fase</li><li><strong>InstructionCycleInfo</strong>: Se agregó icono y color para la nueva fase</li><li><strong>Sequencer</strong>: Se actualizó para manejar la nueva fase</li><li><strong>Localización</strong>: Se agregaron traducciones en español e inglés</li></ul><h3 id="_4-control-de-estado" tabindex="-1">4. Control de Estado <a class="header-anchor" href="#_4-control-de-estado" aria-label="Permalink to &quot;4. Control de Estado&quot;">​</a></h3><ul><li>Se definió el tipo <code>CyclePhase</code> para tipar correctamente las fases</li><li>Se actualizó la variable <code>currentPhase</code> para incluir la nueva fase</li></ul><h2 id="comportamiento-esperado" tabindex="-1">Comportamiento Esperado <a class="header-anchor" href="#comportamiento-esperado" aria-label="Permalink to &quot;Comportamiento Esperado&quot;">​</a></h2><h3 id="antes" tabindex="-1">Antes <a class="header-anchor" href="#antes" aria-label="Permalink to &quot;Antes&quot;">​</a></h3><ul><li>La fase &quot;fetch-operands&quot; terminaba cuando se ejecutaba el siguiente <code>cpu:cycle.update</code></li><li>No había una indicación clara de cuándo exactamente terminaba la obtención de operandos</li></ul><h3 id="despues" tabindex="-1">Después <a class="header-anchor" href="#despues" aria-label="Permalink to &quot;Después&quot;">​</a></h3><ul><li>La fase &quot;fetch-operands&quot; termina específicamente cuando el operando se escribe en el MBR</li><li>Se muestra la fase &quot;fetching-operands-completed&quot; para indicar que los operandos han sido obtenidos</li><li>El flujo de control es más preciso y refleja mejor el comportamiento real del procesador</li></ul><h2 id="instrucciones-afectadas" tabindex="-1">Instrucciones Afectadas <a class="header-anchor" href="#instrucciones-afectadas" aria-label="Permalink to &quot;Instrucciones Afectadas&quot;">​</a></h2><p>Las siguientes instrucciones activan la fase &quot;fetch-operands&quot;:</p><ol><li><strong>MOV con memoria</strong>: <code>MOV AL, [200h]</code></li><li><strong>ADD con memoria</strong>: <code>ADD BL, [201h]</code></li><li><strong>SUB con memoria</strong>: <code>SUB CL, [202h]</code></li><li><strong>CMP con memoria</strong>: <code>CMP DL, [203h]</code></li><li><strong>AND/OR/XOR con memoria</strong>: <code>AND AL, [204h]</code></li><li><strong>Instrucciones de pila</strong>: <code>PUSH</code>, <code>POP</code></li><li><strong>Instrucciones de salto</strong>: <code>JMP</code>, <code>CALL</code>, <code>RET</code></li><li><strong>Instrucciones de interrupción</strong>: <code>INT</code></li></ol><h2 id="archivos-modificados" tabindex="-1">Archivos Modificados <a class="header-anchor" href="#archivos-modificados" aria-label="Permalink to &quot;Archivos Modificados&quot;">​</a></h2><ol><li><code>app/src/computer/cpu/state.ts</code> - Nuevo tipo de fase</li><li><code>app/src/computer/cpu/events.ts</code> - Lógica de finalización</li><li><code>app/src/components/Header.tsx</code> - UI del header</li><li><code>app/src/computer/cpu/InstructionCycleInfo.tsx</code> - Información del ciclo</li><li><code>app/src/computer/cpu/Sequencer.tsx</code> - Secuenciador</li><li><code>app/src/lib/i18n/locales/spanish.ts</code> - Traducciones en español</li><li><code>app/src/lib/i18n/locales/english.ts</code> - Traducciones en inglés</li></ol><h2 id="ejemplo-de-uso" tabindex="-1">Ejemplo de Uso <a class="header-anchor" href="#ejemplo-de-uso" aria-label="Permalink to &quot;Ejemplo de Uso&quot;">​</a></h2><div class="language-assembly vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">assembly</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>; Este programa activará la fase &quot;fetch-operands&quot;</span></span>
<span class="line"><span>ORG 100h</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MOV AL, [200h]    ; Cargar desde memoria - activa fetch-operands</span></span>
<span class="line"><span>ADD BL, [201h]    ; Sumar desde memoria - activa fetch-operands</span></span>
<span class="line"><span>CMP CL, [202h]    ; Comparar con memoria - activa fetch-operands</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MOV DL, 42h       ; Valor inmediato - NO activa fetch-operands</span></span>
<span class="line"><span>MOV AL, BL        ; Entre registros - NO activa fetch-operands</span></span>
<span class="line"><span></span></span>
<span class="line"><span>HLT</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ORG 200h</span></span>
<span class="line"><span>DB 10h, 20h, 30h  ; Datos de prueba</span></span></code></pre></div><h2 id="verificacion" tabindex="-1">Verificación <a class="header-anchor" href="#verificacion" aria-label="Permalink to &quot;Verificación&quot;">​</a></h2><p>Para verificar que los cambios funcionan correctamente:</p><ol><li>Ejecutar el simulador</li><li>Cargar un programa que use instrucciones con memoria</li><li>Ejecutar paso a paso</li><li>Observar que la fase &quot;fetch-operands&quot; cambia a &quot;fetching-operands-completed&quot; cuando se escribe en MBR</li><li>Verificar que las instrucciones sin memoria no activan esta fase</li></ol>`,27)]))}const m=a(i,[["render",c]]);export{h as __pageData,m as default};
