import{_ as t,c as o,o as a,ag as i}from"./chunks/framework.BRWBV1zN.js";const g=JSON.parse('{"title":"SUB","description":"","frontmatter":{},"headers":[],"relativePath":"computer/instructions/sub.md","filePath":"computer/instructions/sub.md","lastUpdated":1754067373000}'),r={name:"computer/instructions/sub.md"};function d(n,e,c,l,s,m){return a(),o("div",null,e[0]||(e[0]=[i('<h1 id="sub" tabindex="-1">SUB <a class="header-anchor" href="#sub" aria-label="Permalink to &quot;SUB&quot;">​</a></h1><p>Esta instrucción le resta el operando fuente al operando destino y guarda el resultado en el operando destino. El operando fuente no se modifica.</p><p>Los <a href="./../cpu.html#flags"><em>flags</em></a> se modifican de la siguiente manera:</p><ul><li>Si el resultado es cero, entonces <code>Z=1</code>. De lo contrario, <code>Z=0</code>.</li><li>Si la resta no entra en el operando destino, entonces <code>C=1</code>. De lo contrario, <code>C=0</code>.</li><li>Si el el bit más significativo del resultado es <code>1</code>, entonces <code>S=1</code>. De lo contrario, <code>S=0</code>.</li><li>Si la resta de un número positivo con un número negativo da un número negativo o la resta de un número negativo con un número positivo da un número positivo, entonces <code>O=1</code>. De lo contrario, <code>O=0</code>.</li></ul><h2 id="uso" tabindex="-1">Uso <a class="header-anchor" href="#uso" aria-label="Permalink to &quot;Uso&quot;">​</a></h2><div class="language-vonsim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vonsim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SUB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dest, fuente</span></span></code></pre></div><p>Las combinaciones válidas de <em>dest</em>, <em>fuente</em> son:</p><ul><li>Registro, registro</li><li>Registro, dirección de memoria</li><li>Registro, inmediato</li><li>Dirección de memoria, registro</li><li>Dirección de memoria, inmediato</li></ul><p>(Ver <a href="./../assembly.html#operandos">tipos de operandos</a>)</p><h2 id="codificacion" tabindex="-1">Codificación <a class="header-anchor" href="#codificacion" aria-label="Permalink to &quot;Codificación&quot;">​</a></h2><h3 id="carga-a-registro" tabindex="-1">Carga a registro <a class="header-anchor" href="#carga-a-registro" aria-label="Permalink to &quot;Carga a registro&quot;">​</a></h3><ul><li>REGISTRO a registro<br><code>0110_RxRy</code></li><li>Memoria (directo) a registro<br><code>0111_Rx00</code>, <em>dir</em></li><li>Memoria (indirecto <code>BL</code>) a registro<br><code>0111_Rx01</code></li><li>Inmediato a registro<br><code>0111_Rx10</code>, <em>dato</em></li></ul><h3 id="almacenar-en-memoria" tabindex="-1">Almacenar en memoria <a class="header-anchor" href="#almacenar-en-memoria" aria-label="Permalink to &quot;Almacenar en memoria&quot;">​</a></h3><ul><li>Registro a memoria (directo)<br><code>1000_00Ry</code>, <em>dir</em></li><li>Registro a memoria (indirecto <code>BL</code>)<br><code>1000_01Ry</code></li><li>Inmediato a memoria (directo)<br><code>1000_1100</code>, <em>dir</em>, <em>dato</em></li><li>Inmediato a memoria (indirecto <code>BL</code>)<br><code>1000_1101</code>, <em>dato</em></li></ul><p><code>Rx</code> o <code>Ry</code>: Índices de registros, número entre <code>0</code> y <code>3</code>, cada índice es de 2 bits.</p><table tabindex="0"><thead><tr><th style="text-align:center;">Registro</th><th style="text-align:center;">Binario</th><th style="text-align:center;">Decimal</th></tr></thead><tbody><tr><td style="text-align:center;">AL</td><td style="text-align:center;">00</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">BL</td><td style="text-align:center;">01</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">CL</td><td style="text-align:center;">10</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">DL</td><td style="text-align:center;">11</td><td style="text-align:center;">3</td></tr></tbody></table>',16)]))}const h=t(r,[["render",d]]);export{g as __pageData,h as default};
