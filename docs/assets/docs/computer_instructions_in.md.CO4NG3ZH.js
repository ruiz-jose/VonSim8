import{_ as a,c as i,o,ag as t}from"./chunks/framework.BRWBV1zN.js";const u=JSON.parse('{"title":"IN","description":"","frontmatter":{},"headers":[],"relativePath":"computer/instructions/in.md","filePath":"computer/instructions/in.md","lastUpdated":1759059220000}'),s={name:"computer/instructions/in.md"};function n(r,e,d,c,l,p){return o(),i("div",null,e[0]||(e[0]=[t('<h1 id="in" tabindex="-1">IN <a class="header-anchor" href="#in" aria-label="Permalink to &quot;IN&quot;">​</a></h1><p>Esta instrucción obtiene un byte de la <a href="./../../io/modules/index.html">memoria E/S</a> y lo almacena en el operando destino. Los <a href="./../cpu.html#flags"><em>flags</em></a> no se modifican.</p><h2 id="uso" tabindex="-1">Uso <a class="header-anchor" href="#uso" aria-label="Permalink to &quot;Uso&quot;">​</a></h2><div class="language-vonsim vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vonsim</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dest, fuente</span></span></code></pre></div><p><em>fuente</em> refiere al puerto o dirección de la memoria E/S. Puede ser un valor inmediato de 8 bits (ver <a href="./../assembly.html#operandos">tipos de operandos</a>) o el registro <code>DL</code>. En el caso de utilizar <code>DL</code>, se utilizará el byte almacenado en el registro como dirección de memoria E/S.</p><p><em>dest</em> puede ser <code>AL</code>, se leerá del puerto y se almacenará en <code>AL</code>.</p><h2 id="codificacion" tabindex="-1">Codificación <a class="header-anchor" href="#codificacion" aria-label="Permalink to &quot;Codificación&quot;">​</a></h2><ul><li>Puerto fijo<br><code>0101000w</code>, <em>puerto</em></li><li>Puerto variable<br><code>0101001w</code></li></ul>',8)]))}const h=a(s,[["render",n]]);export{u as __pageData,h as default};
